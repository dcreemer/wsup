#! /usr/bin/env bash
#
# WSUP -- Workspace Set UP
#

set -o nounset

##
## there variables can be adjusted in your config files
##

# verbosity level; 0 == debug, 1 == normal
VERBOSE=1

# the WSUP directory
WD="$HOME/.wsup"

# repo account name
REPO_USER=${USER}

# default URL prefix for repos:
REPO_PREFIX="git@github.com:${REPO_USER}"

# where to find the bootup wsup dir
WSUP_BOOT="https://raw.github.com/dcreemer/wsup/master/bin/wsup"

# files to ignore
IGNORE_RE="(^\.git$)|(^\.gitignore$)|(^\.wsup$)|(^[Rr][Ee][Aa][Dd][Mm][Ee].*)|(^LICENSE.*)"

# default repo name for the 'dotfiles' repository
BASE_TARGET="dotfiles"

##
## globals (don't touch these)
##

# operating system name
OS=`uname -s`

# the "map" of target => git repos URLs
declare -a REPOS=( "xxx __ yyy" )

# list of pkgs to install
declare -a PKGS=( )

# the repository on which we are currently operating
REPO=""

# current command
CMD=""

# list of all legal commands
commands="help add list link unlink boot pull"

# result of verification
VERIFY=0

# final error code
ERR=0

##
## logging
##

log()
{
    local lvl=$1
    local targ=$2
    shift 2
    local msg=$*
    if [[ "$lvl" -ge "$VERBOSE" ]]; then
        if [[ "$targ" == "" ]]; then
            targ="----------------"
        fi
        printf "[%16s] %s\n" "$targ" "$msg"
    fi
}

seterr()
{
    local code=$1
    if [[ $ERR -eq 0 ]]; then
        ERR=$code
    fi
}

##
## read configs
##

read_configs()
{
    # read base configuration file
    if [[ -r "$HOME/.wsup/config" ]]; then
        log 0 "" "reading $HOME/.wsup/config"
        . "$HOME/.wsup/config"
    fi
    # read all target-specific configurations
    for t in $(cd ${WD}; ls -A); do
        read_one_config $t
    done
}

read_one_config()
{
    local target=$1
    local tc="${WD}/${target}/.wsup/config"
    if [[ -r "$tc" ]]; then
        log 0 "$target" "reading ${tc}"
        . "$tc"
    fi
}

##
## target / management
##

add_target()
{
    # add k = v to REPOS map
    local k=$1
    local v=$2
    get_target $k
    if [[ "$REPO" == "" ]]; then
        REPOS[${#REPOS[@]}]="${k} __ ${v}"
        log 0 "$k" "adding target $v"
    elif [[ "$v" != "$REPO" ]]; then
        log 1 "$k" "error: target added with $REPO and $v"
    fi
}

get_target()
{
    # given a target name, fetch the target repo
    local target=$1
    REPO=""
    map_targets get_one_target $target
}

get_one_target()
{
    local target=$1
    local r=$2
    local cand=$3
    if [[ "$target" == "$cand" ]]; then
       REPO=$r
    fi
}

scan_targets()
{
    # look for targets on disk but not pre-added to the targets list
    for t in $(cd ${WD}; ls -A); do
        local tc="${WD}/${t}/"
        if [[ -d "$tc" ]]; then
            get_target $t
            if [[ "$REPO" == "" ]]; then
                # found a target -- get the remote (if any)
                if [[ -d "${tc}/.git" ]]; then
                    repo=`cd ${tc}; git remote -v | grep fetch | awk '{print $2}'`
                else
                    repo=""
                fi
                add_target $t "$repo"
            fi
        fi
    done
    # if there is no base repo, add the default:
    get_target $BASE_TARGET
    if [[ $REPO == "" ]]; then
        add_target $BASE_TARGET "${REPO_PREFIX}/${BASE_TARGET}.git"
        get_target $BASE_TARGET
    fi
}


map_targets()
{
    local fn=$1
    shift
    local count=${#REPOS[@]}
    local idx=0
    while [[ $idx -lt $count ]]; do
        pair=${REPOS[$idx]}
        local t="${pair%% __ *}"
        local r="${pair##* __ }"
        if [[ "$t" != "xxx" ]]; then
            $fn "$t" "$r" "$*"
        fi
        ((idx++))
    done
}

##
## pkg managment
##

install_package()
{
    # schedule a package to be installed
    PKGS[${#PKGS[@]}]="$*"
}

ensure_update()
{
    if [[ $DONE_UPDATE -eq 0 ]]; then
        case $OS in
            "Linux")
                sudo apt-get update
                ;;
            "Darwin")
                brew update
                ;;
            "FreeBSD")
                sudo pkg update
                ;;
        esac
        DONE_UPDATE=1
    fi
}

install_packages()
{
    # indicate that we have not done a pkg db update
    DONE_UPDATE=0
    idx=0
    while [[ $idx -lt ${#PKGS[@]} ]]; do
        local pkg="${PKGS[$idx]}"
        case $OS in
            "Linux")
                install_apt_pkg $pkg
                ;;
            "Darwin")
                install_brew_pkg $pkg
                ;;
            "FreeBSD")
                install_bsd_pkg $pkg
                ;;
        esac
        ((idx++))
    done
}

install_apt_pkg()
{
    # install an apt-based package (if it doesn't exist)
    local p=$1
    shift
    local args=$*
    dpkg -l $p >/dev/null 2>&1
    if [[ $? -ne 0 ]]; then
        ensure_update
        log 1 "" "installing $p"
        sudo apt-get install -y $p
    else
        log 0 "" "$p already installed"
    fi
}

install_brew_pkg()
{
    # install a brew-based package (if it doesn't exist)
    local p=$1
    shift
    if [[ "$p" == "cask" && "$*" != "" ]]; then
        # install cask package
        install_brew_cask_pkg $*
    else
        local args=$*
        if [[ ! -d /usr/local/Cellar/${p} ]]; then
            ensure_update
            log 1 "" "installing $p"
            brew install $p $args
        else
            log 0 "" "$p already installed"
        fi
    fi
}

install_brew_cask_pkg()
{
    # install a brew-cask based package (if it doesn't exist)
    local p=$1
    shift
    local args=$*
    brew cask info "$p" | grep "Not installed" > /dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        ensure_update
        log 1 "" "installing cask $p"
        brew cask install $p $args
    else
        log 0 "" "cask $p already installed"
    fi
}

install_bsd_pkg()
{
    # install a freebsd pkg-based package (if it doesn't exist)
    local p=$1
    shift
    local args=$*
    pkg info -e $p
    if [[ $? -eq 1 ]]; then
        ensure_update
        log 1 "" "installing $p"
        sudo pkg install -U -y $p
    else
        log 0 "" "$p already installed"
    fi
}

##
## repos
##

fetch_repo()
{
    # given a target name, fetch the repository 
    local target=$1
    local target_dir=${WD}/$target
    if [[ ! -r $target_dir ]]; then
        get_target $target
        if [[ "$REPO" == "" ]]; then
            local r="${REPO_PREFIX}/$target"
            log 0 $target "testing for existence of $r"
            curl -IfsSL "$r" > /dev/null 2>&1
            if [[ $? -eq 0 ]]; then
                REPO=$r
                log 0 $target "found $r"
            fi
        fi
        if [[ "$REPO" != "" ]]; then
            log 1 "$target" "cloning $REPO"
            git clone $REPO $target_dir
            if [[ $? -ne 0 ]]; then
                log 1 "$target" "error cloning $REPO"
                seterr 2
            fi
        else
            log 1 "$target" "target unknown"
            seterr 1
        fi
    fi
}

##
## linking files into place
##

link_target()
{
    local target=$1
    link_target_inner $1 "add"
}

unlink_target()
{
    local target=$1
    link_target_inner $1 "del"
}

verify_target()
{
    local target=$1
    VERIFY=0
    link_target_inner $1 "verify"
}

link_target_inner()
{
    local target=$1
    local action=$2
    local recur=1
    link_dir $target "${WD}/$target" "$HOME" $recur $action
    local osdir="${WD}/$target/.wsup/${OS}"
    if [[ -e "$osdir" && -d "$osdir" ]]; then
        link_dir $target "$osdir" "$HOME" $recur $action
    fi
}

link_dir()
{
    # link all of the files in the target directory to $HOME. Regular files are linked directly,
    # directories files are first made in the home directory, then linked from within
    local target=$1
    local source_dir=$2
    local dest_dir=$3
    local recur=$4
    local action=$5
    local files=$(cd ${source_dir}; ls -A)
    if [[ "$action" == "add" && ! -d "${dest_dir}" ]]; then
        log 0 "" "mkdir $dest_dir"
        mkdir -p "${dest_dir}"
    fi
    for src_f in $files; do
        if [[ ! "$src_f" =~ $IGNORE_RE ]]; then
            if [[ -d "${source_dir}/${src_f}" && $recur -eq 1 ]]; then
                link_dir $target "${source_dir}/${src_f}" "${dest_dir}/${src_f}" 0 $action
            else
                ${action}_symlink $target "${source_dir}/${src_f}" "${dest_dir}/${src_f}"
            fi
        fi
    done
    if [[ "$action" == "del" && "${dest_dir}" != "${HOME}" && -d "${dest_dir}" ]]; then
        local files="$(ls -A ${dest_dir})"
        if [[ "$files" == "" ]]; then
            log 1 $target "rmdir $dest_dir (empty)"
            rmdir "${dest_dir}"
        fi
    fi
}
 
add_symlink()
{
    target=$1
    src=$2
    targ=$3
    log 0 "$target" "link $targ -> $src"
    # if we have a good source, target
    if [[ ! -z "$src" && ! -z "$targ" ]]; then
        t=$(readlink $targ)
        if [[ "$t" != "$src" ]]; then
            # targ link is incorrect
            rm -rf $targ
            # and symlink it
            log 1 "$target" "link $src"
            ln -s $src $targ
        fi
    fi
}

del_symlink()
{
    # unlink if it's a symlink
    target=$1
    src=$2
    targ=$3
    log 0 "$target" "unlink $targ -> $src"
    if [[ -h "$targ" ]]; then
        rm -f $targ
        log 1 "$target" "unlink $targ"
    fi
}

verify_symlink()
{
    # verify symlink is correct
    target=$1
    src=$2
    targ=$3
    local result=0
    if [[ ! -e "$targ" ]]; then
        log 0 "$target" "$targ does not exist"
        result=-1
    elif [[ ! -h "$targ" ]]; then
        log 0 "$target" "$targ is not a link"
        result=-2
    else
        t=$(readlink $targ)
        if [[ "$t" != "$src" ]]; then
            log 0 "$target" "verify $targ link is incorrect"
            result=-3
        fi
    fi
    if [[ $VERIFY -eq 0 ]]; then
        VERIFY=$result
    fi
    if [[ $result -ne 0 ]]; then
        log 0 "$target" "$targ is not a link to $src"
    fi
    return $result
}

##
## installation
##

run_postinstall()
{
    # if target has a postinstall script, run it
    local script="${WD}/$1/.wsup/postinstall"
    if [[ -x "$script" ]]; then
        log 0 $1 "exec $script"
        . $script
        if [[ $? -ne 0 ]]; then
            log 1 $1 "error in $script"
            seterr 1
        fi
    fi
}

##
## top-level commands
##

execute_command()
{
    local cmd=$1
    shift
    if [[ $commands =~ $cmd ]]; then
        command_$cmd $@
    else
        echo "command \"$cmd\" unknown"
        command_help
        seterr -1
    fi
}

##
## add command -- fetch the named target and then link
##

command_add()
{
    for arg in $@; do
        if [[ "$arg" =~ (git@)|(://) ]]; then
            target=`basename $arg`
            target=${target/.git/}
            add_target "$target" "$arg"
        else
            target=$arg
        fi
        add_one $target
    done
}

add_one()
{
    local target=$1
    log 1 $target "start add"
    fetch_repo $target
    if [[ "$ERR" == "0" ]]; then
        read_one_config $target
        install_packages
        link_target $target
        run_postinstall $target
    fi
    log 1 $target "end add"
}

##
## unlink command -- remove the links from the given target (but do not remove the target)
##

command_unlink()
{
    if [[ $# -gt 0 ]]; then
        for t in $@; do
            unlink_one $t ""
        done
    else
        map_targets unlink_one "noerr"
    fi
}

unlink_one()
{
    local target=$1
    local repo=$2
    shift 2
    local noerr=$*
    if [[ -d "${WD}/${target}" ]]; then
        unlink_target $target
    elif [[ "$noerr" == "" ]]; then
        log 1 $target "unknown"
        seterr 1
    fi
}

##
## link command -- link all files and dirs in the given target(s)
##

command_link()
{
    install_packages
    if [[ $# -gt 0 ]]; then
        for t in $@; do
            link_one $t ""
        done
    else
        map_targets link_one "noerr"
    fi
}

link_one()
{
    local target=$1
    local repo=$2
    shift 2
    local noerr=$*
    if [[ -d "${WD}/${target}" ]]; then
        link_target $target
        run_postinstall $target
    elif [[ "$noerr" == "" ]]; then
        log 1 $target "unknown"
        seterr 1
    fi
}

##
## pull command -- git pull and git status in the given target repo
##

command_pull()
{
    if [[ $# -gt 0 ]]; then
        for t in $@; do
            pull_one $t
        done
    else
        map_targets pull_one
    fi
}

pull_one()
{
    local target=$1
    get_target $target
    if [[ ! -z $REPO ]]; then
        cd "${WD}/$target"
        if [[ -d ".git" ]]; then
            echo "$target"
            git pull
            git status -s
            echo ""
        fi
    else
        echo "unknown target '$target'"
    fi
}

##
## list command -- list all known targets, both installed and not
##

command_list()
{
    echo "TARGET           S REPOSITORY"
    echo "---------------- - --------------------------------------------------------------------"
    map_targets "print_target_info"
}

print_target_info()
{
    local target=$1
    local r=$2
    local status=" "
    if [[ -d "${WD}/${target}" ]]; then
        verify_target $target
        if [[ $VERIFY -eq 0 ]]; then
            status="*"
        else
            status="!"
        fi
    fi
    if [[ "$r" == "" ]]; then
        r="<unknown>"
    fi
    printf "%-16s %s %s\n" "${target}" "$status" "$r"
}

##
## boot command
##

command_boot()
{
    if [[ ! -d "${WD}" ]]; then
        mkdir ${WD}
        echo "# wsup config file for ${USER}" > "${WD}/config"
    fi
    if [[ ! -d "${WD}/wsup" ]]; then
        log 1 "" "bootstrapping wsup!"
        # ensure that we have git and curl:
        install_package git
        install_package curl
        install_packages
        mkdir -p "${WD}/wsup/bin"
        local ws="${WD}/wsup/bin/wsup"
        curl -fsSL "${WSUP_BOOT}" > $ws
        chmod a+x $ws
        scan_targets
    fi
    link_target wsup
}

##
## help command
##

command_help()
{
cat <<HELP
usage: wsup [<command>] [target(s)]

wsup help                  - show this help message
wsup link [target(s)]      - with no arguments, link all known targets. With arguments, link the given target(s)
wsup unlink [target(s)]    - same as link, but unlink
wsup add <target> | <url>  - git clone the target or url, then link
wsup list (or just "wsup") - show status for all known targets
wsup pull [target(s)]      - with no arguments, 'git pull' all known targets. With arguments, just 'git pull' the given target(s)

see https://github.com/dcreemer/wsup for detailed documentation

HELP
}

##
## Main Program
##

# parse command line options
while getopts "v" opt; do
    case $opt in
        v)
            VERBOSE=0
            ;;
        *)
            command_help
            exit -1
            ;;
    esac
done
shift $((OPTIND - 1))

# parse command argument
if [[ $# == 0 ]]; then
    # if no command...
    if [[ "${BOOT:=no}" = "yes" || ! -r "${WD}/wsup" ]]; then
        # but we are being asked to bootup or there is no existing $HOME/.wsup/wsup dir
        CMD="boot"
    else
        CMD="list"
    fi
else
    CMD=$1
    shift
fi

if [[ -d "${WD}" ]]; then
    # read in all configuration files
    read_configs
    # scan to be sure we have all known targets
    scan_targets
fi

# execute the given command and return status:
execute_command $CMD $@
if [[ $ERR -ne 0 ]]; then
    exit $ERR
fi
